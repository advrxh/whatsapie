{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"whatsapie Unofficial wrapper for Meta's Whatsapp Cloud API written in Python Installation $ pip install whatsapie Note whatsapie requires python 3.10 or above Prerequisites Follow Meta's Whatsapp Cloud API Documentation and obtain, meta business app ACCESS_TOKEN and PHONE_NUMBER_ID Get Started Get started here Contribution This repo is open for contribution. I'd love some contribution here Maintained by Aadil Varsh","title":"Home"},{"location":"#whatsapie","text":"Unofficial wrapper for Meta's Whatsapp Cloud API written in Python","title":"whatsapie"},{"location":"#installation","text":"$ pip install whatsapie Note whatsapie requires python 3.10 or above","title":"Installation"},{"location":"#prerequisites","text":"Follow Meta's Whatsapp Cloud API Documentation and obtain, meta business app ACCESS_TOKEN and PHONE_NUMBER_ID","title":"Prerequisites"},{"location":"#get-started","text":"Get started here","title":"Get Started"},{"location":"#contribution","text":"This repo is open for contribution. I'd love some contribution here Maintained by Aadil Varsh","title":"Contribution"},{"location":"get-started/","text":"whatsapie, The first wrapper for Meta's Whatsapp cloud API. Before you begin, you must first obtain the ACCESS_TOKEN and PHONE_NUMBER_ID , which are given in the Prerequisites . Using ENV variables for security Using os.getenv() , load the environment variables ACCESS TOKEN and PHONE NUMBER ID into the module Here's how to use whatsapie to send a short hello world message to a Whatsapp subscriber in 15 lines!!!! hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) This is how simple it is to use whatsapie to send a hello world message. \ud83e\udd73 Closer Look! Let's take a closer look at what's happening! hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Whatsapie and Text are two classes from our package that we're importing. The primary manager class is whatsapie, and you must use it to create a new manager. You can have several managers for your various WhatsApp businesses. hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Both ACCESS_TOKEN and PHONE_NUMBER_ID are now sent as parameters. Both of these parameters are required; it is recommended that you save them as environment variables and import them into the module using os . getenv () hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Now we're going to make an instance of the Text class, which represents a text message api object. A to and body argument are required in a Text. Every message classe, regardless of its type, receives the to parameter. hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Finally, we use the whatsapie manager instance and await the Whatsapie . send () method inside an async function, and run it using asyncio . run ( main ()) . This method, in the background, accesses the api endpoint and sends the data from the message class as a json object body.","title":"Get Started"},{"location":"get-started/#closer-look","text":"Let's take a closer look at what's happening! hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Whatsapie and Text are two classes from our package that we're importing. The primary manager class is whatsapie, and you must use it to create a new manager. You can have several managers for your various WhatsApp businesses. hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Both ACCESS_TOKEN and PHONE_NUMBER_ID are now sent as parameters. Both of these parameters are required; it is recommended that you save them as environment variables and import them into the module using os . getenv () hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Now we're going to make an instance of the Text class, which represents a text message api object. A to and body argument are required in a Text. Every message classe, regardless of its type, receives the to parameter. hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Finally, we use the whatsapie manager instance and await the Whatsapie . send () method inside an async function, and run it using asyncio . run ( main ()) . This method, in the background, accesses the api endpoint and sends the data from the message class as a json object body.","title":"Closer Look!"},{"location":"Examples/InfoLogs/","text":"Info logs hello_world.py 1 2 3 4 5 6 7 ... from whatsapie import Whatsapie manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID , log = True ) ...","title":"Logs"},{"location":"Examples/InfoLogs/#info-logs","text":"hello_world.py 1 2 3 4 5 6 7 ... from whatsapie import Whatsapie manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID , log = True ) ...","title":"Info logs"},{"location":"Examples/LocationMessage/","text":"Basic Location Message hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import asyncio from whatsapie import Whatsapie , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) location_message = Location ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) async def main (): await manager . send ( location_message ) asyncio . run ( main ())","title":"Location Messages"},{"location":"Examples/LocationMessage/#basic-location-message","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import asyncio from whatsapie import Whatsapie , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) location_message = Location ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) async def main (): await manager . send ( location_message ) asyncio . run ( main ())","title":"Basic Location Message"},{"location":"Examples/MediaMessage/","text":"Basic Media Message hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import asyncio from whatsapie import Whatsapie , Media manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) location_message = Media ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number type = \"media_type\" , # Media type, Supports 'image', 'audio', 'document', 'video' link = \"media_link\" , # Link to the hosted media on the web. caption = \"media_caption\" , filename = \"media_filename\" ) async def main (): await manager . send ( media_message ) asyncio . run ( main ())","title":"Media Messages"},{"location":"Examples/MediaMessage/#basic-media-message","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import asyncio from whatsapie import Whatsapie , Media manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) location_message = Media ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number type = \"media_type\" , # Media type, Supports 'image', 'audio', 'document', 'video' link = \"media_link\" , # Link to the hosted media on the web. caption = \"media_caption\" , filename = \"media_filename\" ) async def main (): await manager . send ( media_message ) asyncio . run ( main ())","title":"Basic Media Message"},{"location":"Examples/MessageGroup/","text":"Message Groups hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import asyncio from whatsapie import Whatsapie , Text , Group , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message_1 = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) text_message_2 = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) location_message = Location ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) message_group = Group ([ text_message_1 , text_message_2 , location_message ]) async def main (): await manager . send_group ( message_group ) asyncio . run ( main ()) Message group to a single recipient hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import asyncio from whatsapie import Whatsapie , Text , Group , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message_1 = Text ( body = \"Hello world\" ) text_message_2 = Text ( body = \"Hello world\" ) location_message = Location ( lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) message_group = Group ( to = \"91XXXXXXXXXX\" , message_list = [ text_message_1 , text_message_2 , location_message ]) async def main (): await manager . send_group ( message_group ) asyncio . run ( main ())","title":"Message Groups"},{"location":"Examples/MessageGroup/#message-groups","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import asyncio from whatsapie import Whatsapie , Text , Group , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message_1 = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) text_message_2 = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) location_message = Location ( to = \"1XXXXXXXXX\" , # recipients registered whatsapp number lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) message_group = Group ([ text_message_1 , text_message_2 , location_message ]) async def main (): await manager . send_group ( message_group ) asyncio . run ( main ())","title":"Message Groups"},{"location":"Examples/MessageGroup/#message-group-to-a-single-recipient","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import asyncio from whatsapie import Whatsapie , Text , Group , Location manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message_1 = Text ( body = \"Hello world\" ) text_message_2 = Text ( body = \"Hello world\" ) location_message = Location ( lat = \"LATITUDE_VALUE\" , # a decimal value, but pass parameter as a string long = \"LONGITUDE_VALUE\" , # a decimal value, but pass parameter as a string name = \"LOCATION_NAME\" , # location name address = \"LOCATION_ADDRESS\" # location address ) message_group = Group ( to = \"91XXXXXXXXXX\" , message_list = [ text_message_1 , text_message_2 , location_message ]) async def main (): await manager . send_group ( message_group ) asyncio . run ( main ())","title":"Message group to a single recipient"},{"location":"Examples/TextMessage/","text":"Basic Text Message hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ()) Basic Text Message with url preview hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from whatsapie import whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world, https://helloworld.com\" , preview_url = True ) async def main (): await manager . send ( text_message ) asyncio . run ( main ())","title":"Text Messages"},{"location":"Examples/TextMessage/#basic-text-message","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import asyncio from whatsapie import Whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world\" ) async def main (): await manager . send ( text_message ) asyncio . run ( main ())","title":"Basic Text Message"},{"location":"Examples/TextMessage/#basic-text-message-with-url-preview","text":"hello_world.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import asyncio from whatsapie import whatsapie , Text manager = Whatsapie ( ACCESS_TOKEN , PHONE_NUMBER_ID ) text_message = Text ( to = \"1XXXXXXXXX\" , body = \"Hello world, https://helloworld.com\" , preview_url = True ) async def main (): await manager . send ( text_message ) asyncio . run ( main ())","title":"Basic Text Message with url preview"},{"location":"Reference/__init__/","text":"whatsapie/__init__.py Whatsapie Whatsapp Cloud API manager class, this class handles the functions of making httpx to Meta's cloud api. Source code in whatsapie/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class Whatsapie : \"\"\" Whatsapp Cloud API manager class, this class handles the functions of making httpx to Meta's cloud api. \"\"\" def __init__ ( self , access_token : str , phone_number_id : str , log : bool = False ) -> None : \"\"\"Initializes the whatsapie manager class. Args: access_token: Meta's Whatsapp Cloud API user specific access token. phone_number_id: Meta's Whatsapp Cloud API user specific phone number ID. \"\"\" self . schema_generator = SchemaGenerator () self . access_token = access_token self . phone_number_id = phone_number_id self . log = log self . url = META_GRAPH_API_ENDPOINT . format ( version = META_GRAPH_API_VERSION , phone_number_id = self . phone_number_id ) def inspect_schema ( self , message : Message , pretty_print : bool = True ): \"\"\"Invoke this method from an instance to inspect the api schema of this message Args: message: Must be a type of Message Instance supports **Text, Location, Media** \"\"\" body = self . schema_generator . generate ( message , dump_json_str = False ) if not pretty_print : return body pprint ( body , depth = 2 , width = 4 ) return body async def send ( self , message : Message ): \"\"\"Invoke this method from an instance to send a whatsapp message Args: message: Must be a type of Message Instance supports **Text, Location, Media** Returns: A bool status of the performed api call Raises: ErrorResponse: If the Cloud API returns and error response \"\"\" async with httpx . AsyncClient ( base_url = self . url ) as client : await self . post ( client = client , message = message ) async def post ( self , client , message ): body = self . schema_generator . generate ( message , dump_json_str = True ) headers = REQUEST_HEADERS headers [ \"Authorization\" ] = f \"Bearer { self . access_token } \" response = await client . post ( url = \"/\" , data = body , headers = headers ) if response . status_code == 200 : if self . log : logger . info ( f \"OK | { response . status_code } | { response . text } \" ) return True raise ErrorResponse ( response ) async def send_group ( self , message_group : Group ): async with httpx . AsyncClient ( base_url = self . url ) as client : tasks = [] for message in message_group . message_list : tasks . append ( asyncio . create_task ( self . post ( client = client , message = message )) ) await asyncio . gather ( * tasks ) __init__ ( access_token , phone_number_id , log = False ) Initializes the whatsapie manager class. Parameters: Name Type Description Default access_token str Meta's Whatsapp Cloud API user specific access token. required phone_number_id str Meta's Whatsapp Cloud API user specific phone number ID. required Source code in whatsapie/__init__.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , access_token : str , phone_number_id : str , log : bool = False ) -> None : \"\"\"Initializes the whatsapie manager class. Args: access_token: Meta's Whatsapp Cloud API user specific access token. phone_number_id: Meta's Whatsapp Cloud API user specific phone number ID. \"\"\" self . schema_generator = SchemaGenerator () self . access_token = access_token self . phone_number_id = phone_number_id self . log = log self . url = META_GRAPH_API_ENDPOINT . format ( version = META_GRAPH_API_VERSION , phone_number_id = self . phone_number_id ) inspect_schema ( message , pretty_print = True ) Invoke this method from an instance to inspect the api schema of this message Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media required Source code in whatsapie/__init__.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def inspect_schema ( self , message : Message , pretty_print : bool = True ): \"\"\"Invoke this method from an instance to inspect the api schema of this message Args: message: Must be a type of Message Instance supports **Text, Location, Media** \"\"\" body = self . schema_generator . generate ( message , dump_json_str = False ) if not pretty_print : return body pprint ( body , depth = 2 , width = 4 ) return body send ( message ) async Invoke this method from an instance to send a whatsapp message Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media required Returns: Type Description A bool status of the performed api call Raises: Type Description ErrorResponse If the Cloud API returns and error response Source code in whatsapie/__init__.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 async def send ( self , message : Message ): \"\"\"Invoke this method from an instance to send a whatsapp message Args: message: Must be a type of Message Instance supports **Text, Location, Media** Returns: A bool status of the performed api call Raises: ErrorResponse: If the Cloud API returns and error response \"\"\" async with httpx . AsyncClient ( base_url = self . url ) as client : await self . post ( client = client , message = message )","title":"__init__.py"},{"location":"Reference/__init__/#whatsapie__init__py","text":"","title":"whatsapie/__init__.py"},{"location":"Reference/__init__/#whatsapie.Whatsapie","text":"Whatsapp Cloud API manager class, this class handles the functions of making httpx to Meta's cloud api. Source code in whatsapie/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class Whatsapie : \"\"\" Whatsapp Cloud API manager class, this class handles the functions of making httpx to Meta's cloud api. \"\"\" def __init__ ( self , access_token : str , phone_number_id : str , log : bool = False ) -> None : \"\"\"Initializes the whatsapie manager class. Args: access_token: Meta's Whatsapp Cloud API user specific access token. phone_number_id: Meta's Whatsapp Cloud API user specific phone number ID. \"\"\" self . schema_generator = SchemaGenerator () self . access_token = access_token self . phone_number_id = phone_number_id self . log = log self . url = META_GRAPH_API_ENDPOINT . format ( version = META_GRAPH_API_VERSION , phone_number_id = self . phone_number_id ) def inspect_schema ( self , message : Message , pretty_print : bool = True ): \"\"\"Invoke this method from an instance to inspect the api schema of this message Args: message: Must be a type of Message Instance supports **Text, Location, Media** \"\"\" body = self . schema_generator . generate ( message , dump_json_str = False ) if not pretty_print : return body pprint ( body , depth = 2 , width = 4 ) return body async def send ( self , message : Message ): \"\"\"Invoke this method from an instance to send a whatsapp message Args: message: Must be a type of Message Instance supports **Text, Location, Media** Returns: A bool status of the performed api call Raises: ErrorResponse: If the Cloud API returns and error response \"\"\" async with httpx . AsyncClient ( base_url = self . url ) as client : await self . post ( client = client , message = message ) async def post ( self , client , message ): body = self . schema_generator . generate ( message , dump_json_str = True ) headers = REQUEST_HEADERS headers [ \"Authorization\" ] = f \"Bearer { self . access_token } \" response = await client . post ( url = \"/\" , data = body , headers = headers ) if response . status_code == 200 : if self . log : logger . info ( f \"OK | { response . status_code } | { response . text } \" ) return True raise ErrorResponse ( response ) async def send_group ( self , message_group : Group ): async with httpx . AsyncClient ( base_url = self . url ) as client : tasks = [] for message in message_group . message_list : tasks . append ( asyncio . create_task ( self . post ( client = client , message = message )) ) await asyncio . gather ( * tasks )","title":"Whatsapie"},{"location":"Reference/__init__/#whatsapie.Whatsapie.__init__","text":"Initializes the whatsapie manager class. Parameters: Name Type Description Default access_token str Meta's Whatsapp Cloud API user specific access token. required phone_number_id str Meta's Whatsapp Cloud API user specific phone number ID. required Source code in whatsapie/__init__.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , access_token : str , phone_number_id : str , log : bool = False ) -> None : \"\"\"Initializes the whatsapie manager class. Args: access_token: Meta's Whatsapp Cloud API user specific access token. phone_number_id: Meta's Whatsapp Cloud API user specific phone number ID. \"\"\" self . schema_generator = SchemaGenerator () self . access_token = access_token self . phone_number_id = phone_number_id self . log = log self . url = META_GRAPH_API_ENDPOINT . format ( version = META_GRAPH_API_VERSION , phone_number_id = self . phone_number_id )","title":"__init__()"},{"location":"Reference/__init__/#whatsapie.Whatsapie.inspect_schema","text":"Invoke this method from an instance to inspect the api schema of this message Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media required Source code in whatsapie/__init__.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 def inspect_schema ( self , message : Message , pretty_print : bool = True ): \"\"\"Invoke this method from an instance to inspect the api schema of this message Args: message: Must be a type of Message Instance supports **Text, Location, Media** \"\"\" body = self . schema_generator . generate ( message , dump_json_str = False ) if not pretty_print : return body pprint ( body , depth = 2 , width = 4 ) return body","title":"inspect_schema()"},{"location":"Reference/__init__/#whatsapie.Whatsapie.send","text":"Invoke this method from an instance to send a whatsapp message Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media required Returns: Type Description A bool status of the performed api call Raises: Type Description ErrorResponse If the Cloud API returns and error response Source code in whatsapie/__init__.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 async def send ( self , message : Message ): \"\"\"Invoke this method from an instance to send a whatsapp message Args: message: Must be a type of Message Instance supports **Text, Location, Media** Returns: A bool status of the performed api call Raises: ErrorResponse: If the Cloud API returns and error response \"\"\" async with httpx . AsyncClient ( base_url = self . url ) as client : await self . post ( client = client , message = message )","title":"send()"},{"location":"Reference/constants/","text":"whatsapie/constants.py Package specific constants. Meta API Constants META_GRAPH_API_ENDPOINT : A f-string value of meta graph url endpoint. META_GRAPH_API_VERSION : Package specific Meta Graph API version. Request Constants REQUEST_HEADERS : Common request headers for all httpx made from the wrapper. Media Constants CAPTION_ALLOWED_MEDIA_TYPES : Media types in which captions are allowed. FILENAME_ALLOWED_MEDIA_TYPES : Media types in which custom filenames are allowed.","title":"constants.py"},{"location":"Reference/constants/#whatsapieconstantspy","text":"Package specific constants. Meta API Constants META_GRAPH_API_ENDPOINT : A f-string value of meta graph url endpoint. META_GRAPH_API_VERSION : Package specific Meta Graph API version. Request Constants REQUEST_HEADERS : Common request headers for all httpx made from the wrapper. Media Constants CAPTION_ALLOWED_MEDIA_TYPES : Media types in which captions are allowed. FILENAME_ALLOWED_MEDIA_TYPES : Media types in which custom filenames are allowed.","title":"whatsapie/constants.py"},{"location":"Reference/errors/","text":"whatsapie/errors.py ErrorResponse Bases: BaseException Custom Exception to create tracebacks of api response errors. Invoked when the response status code is not 200. Parameters: Name Type Description Default response Response The response with status code other than 200. required Source code in whatsapie/errors.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class ErrorResponse ( BaseException ): \"\"\"Custom Exception to create tracebacks of api response errors. Invoked when the response status code is not 200. Args: response: The response with status code other than 200. \"\"\" def __init__ ( self , response : Response ) -> None : error = response . json ()[ \"error\" ][ \"message\" ] status_code = response . status_code message = f \"[ { status_code } ] { error } \" super () . __init__ ( message )","title":"errors.py"},{"location":"Reference/errors/#whatsapieerrorspy","text":"","title":"whatsapie/errors.py"},{"location":"Reference/errors/#whatsapie.errors.ErrorResponse","text":"Bases: BaseException Custom Exception to create tracebacks of api response errors. Invoked when the response status code is not 200. Parameters: Name Type Description Default response Response The response with status code other than 200. required Source code in whatsapie/errors.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class ErrorResponse ( BaseException ): \"\"\"Custom Exception to create tracebacks of api response errors. Invoked when the response status code is not 200. Args: response: The response with status code other than 200. \"\"\" def __init__ ( self , response : Response ) -> None : error = response . json ()[ \"error\" ][ \"message\" ] status_code = response . status_code message = f \"[ { status_code } ] { error } \" super () . __init__ ( message )","title":"ErrorResponse"},{"location":"Reference/ext/__init__/","text":"whatsapie/ext/__init__.py","title":"`whatsapie/ext/__init__.py`"},{"location":"Reference/ext/__init__/#whatsapieext__init__py","text":"","title":"whatsapie/ext/__init__.py"},{"location":"Reference/ext/message/__init__/","text":"whatsapie/ext/message/__init__.py","title":"`whatsapie/ext/message/__init__.py`"},{"location":"Reference/ext/message/__init__/#whatsapieextmessage__init__py","text":"","title":"whatsapie/ext/message/__init__.py"},{"location":"Reference/ext/message/group/","text":"whatsapie/ext/message/group.py Group Message Group Parameters: Name Type Description Default message_list List [ Text | Media | Location ] List of Messsage objects required Source code in whatsapie/ext/message/group.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Group : \"\"\"Message Group Args: message_list: List of Messsage objects \"\"\" def __init__ ( self , message_list : List [ Text | Media | Location ], to : str = None ): self . message_list = message_list self . to = to if self . to is not None : for i in range ( 0 , len ( self . message_list )): self . message_list [ i ] . to = self . to def add_to_group ( self , message : Message ): if self . to is not None : message . to = self . to self . message_list . append ( message )","title":"whatsapie/ext/message/group.py"},{"location":"Reference/ext/message/group/#whatsapieextmessagegrouppy","text":"","title":"whatsapie/ext/message/group.py"},{"location":"Reference/ext/message/group/#whatsapie.ext.message.group.Group","text":"Message Group Parameters: Name Type Description Default message_list List [ Text | Media | Location ] List of Messsage objects required Source code in whatsapie/ext/message/group.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Group : \"\"\"Message Group Args: message_list: List of Messsage objects \"\"\" def __init__ ( self , message_list : List [ Text | Media | Location ], to : str = None ): self . message_list = message_list self . to = to if self . to is not None : for i in range ( 0 , len ( self . message_list )): self . message_list [ i ] . to = self . to def add_to_group ( self , message : Message ): if self . to is not None : message . to = self . to self . message_list . append ( message )","title":"Group"},{"location":"Reference/ext/message/location/","text":"whatsapie/ext/message/location.py Location Bases: Message Inherits from Message class. Inherits from Message class, represents a Location Message api object. Parameters: Name Type Description Default long str Longitude value None lat str Latitude value. None name str Name of the location. None address str Address of the location. None Source code in whatsapie/ext/message/location.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Location ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Location Message api object. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" def __init__ ( self , long : str = None , lat : str = None , name : str = None , address : str = None , to : str = None , ): self . set_params ( long = long , lat = lat , name = name , address = address ) super () . __init__ ( to = to ) def set_params ( self , long : str , lat : str , name : str , address : str ): \"\"\"Sets the values of parameters to the respective class instances. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" self . long = long self . lat = lat self . name = name self . address = address set_params ( long , lat , name , address ) Sets the values of parameters to the respective class instances. Parameters: Name Type Description Default long str Longitude value required lat str Latitude value. required name str Name of the location. required address str Address of the location. required Source code in whatsapie/ext/message/location.py 27 28 29 30 31 32 33 34 35 36 37 38 def set_params ( self , long : str , lat : str , name : str , address : str ): \"\"\"Sets the values of parameters to the respective class instances. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" self . long = long self . lat = lat self . name = name self . address = address","title":"location.py"},{"location":"Reference/ext/message/location/#whatsapieextmessagelocationpy","text":"","title":"whatsapie/ext/message/location.py"},{"location":"Reference/ext/message/location/#whatsapie.ext.message.location.Location","text":"Bases: Message Inherits from Message class. Inherits from Message class, represents a Location Message api object. Parameters: Name Type Description Default long str Longitude value None lat str Latitude value. None name str Name of the location. None address str Address of the location. None Source code in whatsapie/ext/message/location.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Location ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Location Message api object. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" def __init__ ( self , long : str = None , lat : str = None , name : str = None , address : str = None , to : str = None , ): self . set_params ( long = long , lat = lat , name = name , address = address ) super () . __init__ ( to = to ) def set_params ( self , long : str , lat : str , name : str , address : str ): \"\"\"Sets the values of parameters to the respective class instances. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" self . long = long self . lat = lat self . name = name self . address = address","title":"Location"},{"location":"Reference/ext/message/location/#whatsapie.ext.message.location.Location.set_params","text":"Sets the values of parameters to the respective class instances. Parameters: Name Type Description Default long str Longitude value required lat str Latitude value. required name str Name of the location. required address str Address of the location. required Source code in whatsapie/ext/message/location.py 27 28 29 30 31 32 33 34 35 36 37 38 def set_params ( self , long : str , lat : str , name : str , address : str ): \"\"\"Sets the values of parameters to the respective class instances. Args: long: Longitude value lat: Latitude value. name: Name of the location. address: Address of the location. \"\"\" self . long = long self . lat = lat self . name = name self . address = address","title":"set_params()"},{"location":"Reference/ext/message/media/","text":"whatsapie/ext/message/media.py Media Bases: Message Inherits from Message class. Inherits from Message class, represents a Media Message api object. Parameters: Name Type Description Default type str Media type, Supports 'image', 'audio', 'document', 'video' None link str Link to the hosted media on the web. None caption str Media caption. None filename str Media filename. None Source code in whatsapie/ext/message/media.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Media ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Media Message api object. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" def __init__ ( self , type : str = None , link : str = None , caption : str = None , filename : str = None , to : str = None , ): self . set_params ( type = type , link = link , caption = caption , filename = filename ) super () . __init__ ( to = to ) def set_params ( self , type : str , link : str , caption : str = None , filename : str = None ): \"\"\"Sets the required instance parameters. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" self . type = type self . link = link self . caption = None self . filename = None if type in CAPTION_ALLOWED_MEDIA_TYPES : self . caption = caption if type in FILENAME_ALLOWED_MEDIA_TYPES : self . filename = filename set_params ( type , link , caption = None , filename = None ) Sets the required instance parameters. Parameters: Name Type Description Default type str Media type, Supports 'image', 'audio', 'document', 'video' required link str Link to the hosted media on the web. required caption str Media caption. None filename str Media filename. None Source code in whatsapie/ext/message/media.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def set_params ( self , type : str , link : str , caption : str = None , filename : str = None ): \"\"\"Sets the required instance parameters. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" self . type = type self . link = link self . caption = None self . filename = None if type in CAPTION_ALLOWED_MEDIA_TYPES : self . caption = caption if type in FILENAME_ALLOWED_MEDIA_TYPES : self . filename = filename","title":"whatsapie/ext/message/media.py"},{"location":"Reference/ext/message/media/#whatsapieextmessagemediapy","text":"","title":"whatsapie/ext/message/media.py"},{"location":"Reference/ext/message/media/#whatsapie.ext.message.media.Media","text":"Bases: Message Inherits from Message class. Inherits from Message class, represents a Media Message api object. Parameters: Name Type Description Default type str Media type, Supports 'image', 'audio', 'document', 'video' None link str Link to the hosted media on the web. None caption str Media caption. None filename str Media filename. None Source code in whatsapie/ext/message/media.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Media ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Media Message api object. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" def __init__ ( self , type : str = None , link : str = None , caption : str = None , filename : str = None , to : str = None , ): self . set_params ( type = type , link = link , caption = caption , filename = filename ) super () . __init__ ( to = to ) def set_params ( self , type : str , link : str , caption : str = None , filename : str = None ): \"\"\"Sets the required instance parameters. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" self . type = type self . link = link self . caption = None self . filename = None if type in CAPTION_ALLOWED_MEDIA_TYPES : self . caption = caption if type in FILENAME_ALLOWED_MEDIA_TYPES : self . filename = filename","title":"Media"},{"location":"Reference/ext/message/media/#whatsapie.ext.message.media.Media.set_params","text":"Sets the required instance parameters. Parameters: Name Type Description Default type str Media type, Supports 'image', 'audio', 'document', 'video' required link str Link to the hosted media on the web. required caption str Media caption. None filename str Media filename. None Source code in whatsapie/ext/message/media.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def set_params ( self , type : str , link : str , caption : str = None , filename : str = None ): \"\"\"Sets the required instance parameters. Args: type: Media type, Supports 'image', 'audio', 'document', 'video' link: Link to the hosted media on the web. caption: Media caption. filename: Media filename. \"\"\" self . type = type self . link = link self . caption = None self . filename = None if type in CAPTION_ALLOWED_MEDIA_TYPES : self . caption = caption if type in FILENAME_ALLOWED_MEDIA_TYPES : self . filename = filename","title":"set_params()"},{"location":"Reference/ext/message/message/","text":"whatsapie/ext/message/message.py Message Custom python Message class representing a message api object. Parameters: Name Type Description Default to str Phone number of the recipient, must not contain '+' prefix. None Source code in whatsapie/ext/message/message.py 1 2 3 4 5 6 7 8 9 class Message : \"\"\"Custom python Message class representing a message api object. Args: to: Phone number of the recipient, must not contain '+' prefix. \"\"\" def __init__ ( self , to : str = None ) -> None : self . to = to","title":"message.py"},{"location":"Reference/ext/message/message/#whatsapieextmessagemessagepy","text":"","title":"whatsapie/ext/message/message.py"},{"location":"Reference/ext/message/message/#whatsapie.ext.message.message.Message","text":"Custom python Message class representing a message api object. Parameters: Name Type Description Default to str Phone number of the recipient, must not contain '+' prefix. None Source code in whatsapie/ext/message/message.py 1 2 3 4 5 6 7 8 9 class Message : \"\"\"Custom python Message class representing a message api object. Args: to: Phone number of the recipient, must not contain '+' prefix. \"\"\" def __init__ ( self , to : str = None ) -> None : self . to = to","title":"Message"},{"location":"Reference/ext/message/text/","text":"whatsapie/ext/message/text.py Text Bases: Message Inherits from Message class. Inherits from Message class, represents a Text Message api object. Parameters: Name Type Description Default body str Message body text. required preview_url bool Must be set to true, when you want to render the embed for the url in the body. False Source code in whatsapie/ext/message/text.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Text ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Text Message api object. Args: body: Message body text. preview_url: Must be set to true, when you want to render the embed for the url in the body. \"\"\" def __init__ ( self , body : str , preview_url : bool = False , to : str = None , ) -> None : self . body = body self . preview_url = preview_url super () . __init__ ( to = to ) def set_body ( self , body : str ): \"\"\"Sets the body value. Args: body: Message body text. \"\"\" self . body = body def preview_url ( self , _state : bool = None ): \"\"\"Toggles the preview url state Args: _state: New preview_url state. \"\"\" if _state is None : self . preview_url = not self . preview_url self . preview_url = _state preview_url ( _state = None ) Toggles the preview url state Parameters: Name Type Description Default _state bool New preview_url state. None Source code in whatsapie/ext/message/text.py 33 34 35 36 37 38 39 40 41 42 43 def preview_url ( self , _state : bool = None ): \"\"\"Toggles the preview url state Args: _state: New preview_url state. \"\"\" if _state is None : self . preview_url = not self . preview_url self . preview_url = _state set_body ( body ) Sets the body value. Parameters: Name Type Description Default body str Message body text. required Source code in whatsapie/ext/message/text.py 25 26 27 28 29 30 31 def set_body ( self , body : str ): \"\"\"Sets the body value. Args: body: Message body text. \"\"\" self . body = body","title":"text.py"},{"location":"Reference/ext/message/text/#whatsapieextmessagetextpy","text":"","title":"whatsapie/ext/message/text.py"},{"location":"Reference/ext/message/text/#whatsapie.ext.message.text.Text","text":"Bases: Message Inherits from Message class. Inherits from Message class, represents a Text Message api object. Parameters: Name Type Description Default body str Message body text. required preview_url bool Must be set to true, when you want to render the embed for the url in the body. False Source code in whatsapie/ext/message/text.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Text ( Message ): \"\"\"Inherits from Message class. Inherits from Message class, represents a Text Message api object. Args: body: Message body text. preview_url: Must be set to true, when you want to render the embed for the url in the body. \"\"\" def __init__ ( self , body : str , preview_url : bool = False , to : str = None , ) -> None : self . body = body self . preview_url = preview_url super () . __init__ ( to = to ) def set_body ( self , body : str ): \"\"\"Sets the body value. Args: body: Message body text. \"\"\" self . body = body def preview_url ( self , _state : bool = None ): \"\"\"Toggles the preview url state Args: _state: New preview_url state. \"\"\" if _state is None : self . preview_url = not self . preview_url self . preview_url = _state","title":"Text"},{"location":"Reference/ext/message/text/#whatsapie.ext.message.text.Text.preview_url","text":"Toggles the preview url state Parameters: Name Type Description Default _state bool New preview_url state. None Source code in whatsapie/ext/message/text.py 33 34 35 36 37 38 39 40 41 42 43 def preview_url ( self , _state : bool = None ): \"\"\"Toggles the preview url state Args: _state: New preview_url state. \"\"\" if _state is None : self . preview_url = not self . preview_url self . preview_url = _state","title":"preview_url()"},{"location":"Reference/ext/message/text/#whatsapie.ext.message.text.Text.set_body","text":"Sets the body value. Parameters: Name Type Description Default body str Message body text. required Source code in whatsapie/ext/message/text.py 25 26 27 28 29 30 31 def set_body ( self , body : str ): \"\"\"Sets the body value. Args: body: Message body text. \"\"\" self . body = body","title":"set_body()"},{"location":"Reference/schema_generator/__init__/","text":"whatsapie/schema_generator/__init__.py SchemaGenerator Generates api schema from native python object classes. Schema generator class, that generated api body schemas according to provided arguments of type Message. Source code in whatsapie/schema_generator/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class SchemaGenerator : \"\"\"Generates api schema from native python object classes. Schema generator class, that generated api body schemas according to provided arguments of type Message. \"\"\" def __init__ ( self ): pass def generate ( self , message : Message , dump_json_str : bool = True , # If set to True returns a stringified version of the dict object ): \"\"\"Generates schema for the provided message argument. Args: message: Must be a type of Message Instance supports **Text, Location, Media**. dump_json_str: When set to false, will return native python dict. Returns: body: if dump_json_str is True, returns stringified json, else returns native python dict. \"\"\" body = { \"messaging_product\" : \"whatsapp\" , \"recipient_type\" : \"individual\" } body [ \"to\" ] = message . to if isinstance ( message , Text ): body = generate_text_schema ( body , message ) if isinstance ( message , Location ): body = generate_location_schema ( body , message ) if isinstance ( message , Media ): body = generate_media_schema ( body , message ) if isinstance ( message , Template ): body = generate_template_schema ( body , message ) if isinstance ( message , ContactGroup ): body = generate_contact_group_schema ( body , message ) if dump_json_str : return self . dump_json ( body ) return body def dump_json ( self , body ): return json . dumps ( body ) generate ( message , dump_json_str = True ) Generates schema for the provided message argument. Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media . required dump_json_str bool When set to false, will return native python dict. True Returns: Name Type Description body if dump_json_str is True, returns stringified json, else returns native python dict. Source code in whatsapie/schema_generator/__init__.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def generate ( self , message : Message , dump_json_str : bool = True , # If set to True returns a stringified version of the dict object ): \"\"\"Generates schema for the provided message argument. Args: message: Must be a type of Message Instance supports **Text, Location, Media**. dump_json_str: When set to false, will return native python dict. Returns: body: if dump_json_str is True, returns stringified json, else returns native python dict. \"\"\" body = { \"messaging_product\" : \"whatsapp\" , \"recipient_type\" : \"individual\" } body [ \"to\" ] = message . to if isinstance ( message , Text ): body = generate_text_schema ( body , message ) if isinstance ( message , Location ): body = generate_location_schema ( body , message ) if isinstance ( message , Media ): body = generate_media_schema ( body , message ) if isinstance ( message , Template ): body = generate_template_schema ( body , message ) if isinstance ( message , ContactGroup ): body = generate_contact_group_schema ( body , message ) if dump_json_str : return self . dump_json ( body ) return body","title":"__init__.py"},{"location":"Reference/schema_generator/__init__/#whatsapieschema_generator__init__py","text":"","title":"whatsapie/schema_generator/__init__.py"},{"location":"Reference/schema_generator/__init__/#whatsapie.schema_generator.SchemaGenerator","text":"Generates api schema from native python object classes. Schema generator class, that generated api body schemas according to provided arguments of type Message. Source code in whatsapie/schema_generator/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class SchemaGenerator : \"\"\"Generates api schema from native python object classes. Schema generator class, that generated api body schemas according to provided arguments of type Message. \"\"\" def __init__ ( self ): pass def generate ( self , message : Message , dump_json_str : bool = True , # If set to True returns a stringified version of the dict object ): \"\"\"Generates schema for the provided message argument. Args: message: Must be a type of Message Instance supports **Text, Location, Media**. dump_json_str: When set to false, will return native python dict. Returns: body: if dump_json_str is True, returns stringified json, else returns native python dict. \"\"\" body = { \"messaging_product\" : \"whatsapp\" , \"recipient_type\" : \"individual\" } body [ \"to\" ] = message . to if isinstance ( message , Text ): body = generate_text_schema ( body , message ) if isinstance ( message , Location ): body = generate_location_schema ( body , message ) if isinstance ( message , Media ): body = generate_media_schema ( body , message ) if isinstance ( message , Template ): body = generate_template_schema ( body , message ) if isinstance ( message , ContactGroup ): body = generate_contact_group_schema ( body , message ) if dump_json_str : return self . dump_json ( body ) return body def dump_json ( self , body ): return json . dumps ( body )","title":"SchemaGenerator"},{"location":"Reference/schema_generator/__init__/#whatsapie.schema_generator.SchemaGenerator.generate","text":"Generates schema for the provided message argument. Parameters: Name Type Description Default message Message Must be a type of Message Instance supports Text, Location, Media . required dump_json_str bool When set to false, will return native python dict. True Returns: Name Type Description body if dump_json_str is True, returns stringified json, else returns native python dict. Source code in whatsapie/schema_generator/__init__.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 def generate ( self , message : Message , dump_json_str : bool = True , # If set to True returns a stringified version of the dict object ): \"\"\"Generates schema for the provided message argument. Args: message: Must be a type of Message Instance supports **Text, Location, Media**. dump_json_str: When set to false, will return native python dict. Returns: body: if dump_json_str is True, returns stringified json, else returns native python dict. \"\"\" body = { \"messaging_product\" : \"whatsapp\" , \"recipient_type\" : \"individual\" } body [ \"to\" ] = message . to if isinstance ( message , Text ): body = generate_text_schema ( body , message ) if isinstance ( message , Location ): body = generate_location_schema ( body , message ) if isinstance ( message , Media ): body = generate_media_schema ( body , message ) if isinstance ( message , Template ): body = generate_template_schema ( body , message ) if isinstance ( message , ContactGroup ): body = generate_contact_group_schema ( body , message ) if dump_json_str : return self . dump_json ( body ) return body","title":"generate()"},{"location":"Reference/schema_generator/location_schema/","text":"whatsapie/schema_generator/location_schema.py generate_location_schema ( body , message ) Generate schema for Location. Parameters: Name Type Description Default body dict Parent api schema object. required message Location Location instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/location_schema.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def generate_location_schema ( body : dict , message : Location ): \"\"\"Generate schema for Location. Args: body: Parent api schema object. message: Location instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = \"location\" body [ \"location\" ] = { \"longitude\" : message . long , \"latitude\" : message . lat , \"name\" : message . name , \"address\" : message . address , } return body","title":"location_schema.py"},{"location":"Reference/schema_generator/location_schema/#whatsapieschema_generatorlocation_schemapy","text":"","title":"whatsapie/schema_generator/location_schema.py"},{"location":"Reference/schema_generator/location_schema/#whatsapie.schema_generator.location_schema.generate_location_schema","text":"Generate schema for Location. Parameters: Name Type Description Default body dict Parent api schema object. required message Location Location instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/location_schema.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def generate_location_schema ( body : dict , message : Location ): \"\"\"Generate schema for Location. Args: body: Parent api schema object. message: Location instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = \"location\" body [ \"location\" ] = { \"longitude\" : message . long , \"latitude\" : message . lat , \"name\" : message . name , \"address\" : message . address , } return body","title":"generate_location_schema()"},{"location":"Reference/schema_generator/media_schema/","text":"whatsapie/schema_generator/media_schema.py generate_media_schema ( body , message ) Generate schema for Media. Parameters: Name Type Description Default body dict Parent api schema object. required message Media Media instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/media_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def generate_media_schema ( body : dict , message : Media ): \"\"\"Generate schema for Media. Args: body: Parent api schema object. message: Media instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = message . type body [ message . type ] = { \"link\" : message . link } if message . type in CAPTION_ALLOWED_MEDIA_TYPES : body [ message . type ][ \"caption\" ] = message . caption if message . type in FILENAME_ALLOWED_MEDIA_TYPES : body [ message . type ][ \"filename\" ] = message . filename return body","title":"media_schema.py"},{"location":"Reference/schema_generator/media_schema/#whatsapieschema_generatormedia_schemapy","text":"","title":"whatsapie/schema_generator/media_schema.py"},{"location":"Reference/schema_generator/media_schema/#whatsapie.schema_generator.media_schema.generate_media_schema","text":"Generate schema for Media. Parameters: Name Type Description Default body dict Parent api schema object. required message Media Media instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/media_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def generate_media_schema ( body : dict , message : Media ): \"\"\"Generate schema for Media. Args: body: Parent api schema object. message: Media instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = message . type body [ message . type ] = { \"link\" : message . link } if message . type in CAPTION_ALLOWED_MEDIA_TYPES : body [ message . type ][ \"caption\" ] = message . caption if message . type in FILENAME_ALLOWED_MEDIA_TYPES : body [ message . type ][ \"filename\" ] = message . filename return body","title":"generate_media_schema()"},{"location":"Reference/schema_generator/text_schema/","text":"whatsapie/schema_generator/text_schema.py generate_text_schema ( body , message ) Generate schema for Text. Parameters: Name Type Description Default body dict Parent api schema object. required message Text Text instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/text_schema.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def generate_text_schema ( body : dict , message : Text ): \"\"\"Generate schema for Text. Args: body: Parent api schema object. message: Text instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = \"text\" body [ \"text\" ] = { \"preview_url\" : message . preview_url , \"body\" : message . body } return body","title":"text_schema.py"},{"location":"Reference/schema_generator/text_schema/#whatsapieschema_generatortext_schemapy","text":"","title":"whatsapie/schema_generator/text_schema.py"},{"location":"Reference/schema_generator/text_schema/#whatsapie.schema_generator.text_schema.generate_text_schema","text":"Generate schema for Text. Parameters: Name Type Description Default body dict Parent api schema object. required message Text Text instance. required Returns: Name Type Description body Schema body Source code in whatsapie/schema_generator/text_schema.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def generate_text_schema ( body : dict , message : Text ): \"\"\"Generate schema for Text. Args: body: Parent api schema object. message: Text instance. Returns: body: Schema body \"\"\" body [ \"type\" ] = \"text\" body [ \"text\" ] = { \"preview_url\" : message . preview_url , \"body\" : message . body } return body","title":"generate_text_schema()"}]}